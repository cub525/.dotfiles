!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Vim	C,constant	/constant definitions/
!_TAG_KIND_DESCRIPTION!Vim	a,augroup	/autocommand groups/
!_TAG_KIND_DESCRIPTION!Vim	c,command	/user-defined commands/
!_TAG_KIND_DESCRIPTION!Vim	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!Vim	m,map	/maps/
!_TAG_KIND_DESCRIPTION!Vim	n,filename	/vimball filename/
!_TAG_KIND_DESCRIPTION!Vim	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Vim	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	C:/Users/emmet/Documents/Code/GitHub/pytest.vim/ftplugin/python/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
<C-n>	./pytest.vim	/^    nnoremap <script> <buffer> <C-n>   :call <sid>GoToInlineError(1)<CR>$/;"	m
<C-p>	./pytest.vim	/^    nnoremap <script> <buffer> <C-p>   :call <sid>GoToInlineError(-1)<CR>$/;"	m
<Enter>	./pytest.vim	/^    nnoremap <silent> <buffer> <Enter> :call <sid>ClearAll(1)<CR>$/;"	m
<down>	./pytest.vim	/^    nnoremap <script> <buffer> <down>  :call <sid>GoToInlineError(1)<CR>$/;"	m
<up>	./pytest.vim	/^    nnoremap <script> <buffer> <up>    :call <sid>GoToInlineError(-1)<CR>$/;"	m
CloseHandler	./pytest.vim	/^func! CloseHandler(channel)$/;"	f
Pytest	./pytest.vim	/^command! -nargs=+ -complete=custom,s:Completion Pytest call s:Proxy(<f-args>)$/;"	c
g:pytest_executable	./pytest.vim	/^      let g:pytest_executable = "py.test"$/;"	v
g:pytest_last_session	./pytest.vim	/^    let g:pytest_last_session      = ""$/;"	v
g:pytest_last_session	./pytest.vim	/^    let g:pytest_last_session   = stdout$/;"	v
g:pytest_last_session	./pytest.vim	/^    let g:pytest_last_session = ""$/;"	v
g:pytest_last_session	./pytest.vim	/^let g:pytest_last_session      = ""$/;"	v
g:pytest_looponfail	./pytest.vim	/^            let g:pytest_looponfail = 0$/;"	v
g:pytest_looponfail	./pytest.vim	/^            let g:pytest_looponfail = 1$/;"	v
g:pytest_looponfail	./pytest.vim	/^    let g:pytest_looponfail        = 0$/;"	v
g:pytest_looponfail	./pytest.vim	/^    let g:pytest_looponfail = 0$/;"	v
g:pytest_looponfail	./pytest.vim	/^let g:pytest_looponfail        = 0$/;"	v
g:pytest_session_error	./pytest.vim	/^                let g:pytest_session_error = 1$/;"	v
g:pytest_session_error	./pytest.vim	/^                let g:pytest_session_error = g:pytest_session_error + 1$/;"	v
g:pytest_session_error	./pytest.vim	/^                let g:pytest_session_error = g:pytest_session_error - 1$/;"	v
g:pytest_session_error	./pytest.vim	/^            let g:pytest_session_error = 1$/;"	v
g:pytest_session_error	./pytest.vim	/^            let g:pytest_session_error = len(g:pytest_session_errors)$/;"	v
g:pytest_session_error	./pytest.vim	/^    let g:pytest_session_error     = 0$/;"	v
g:pytest_session_error	./pytest.vim	/^    let g:pytest_session_error  = 0$/;"	v
g:pytest_session_error	./pytest.vim	/^let g:pytest_session_error     = 0$/;"	v
g:pytest_session_errors	./pytest.vim	/^        let g:pytest_session_errors = errors$/;"	v
g:pytest_session_errors	./pytest.vim	/^    let g:pytest_session_errors    = {}$/;"	v
g:pytest_session_errors	./pytest.vim	/^    let g:pytest_session_errors = errors$/;"	v
g:pytest_session_errors	./pytest.vim	/^    let g:pytest_session_errors = {}$/;"	v
g:pytest_session_errors	./pytest.vim	/^let g:pytest_session_errors    = {}$/;"	v
g:pytest_test_dir	./pytest.vim	/^	let g:pytest_test_dir        = 'tests'$/;"	v
g:pytest_test_file	./pytest.vim	/^	let g:pytest_test_file       = 'tests.py'$/;"	v
j	./pytest.vim	/^    nnoremap <script> <buffer> j       :call <sid>GoToInlineError(1)<CR>$/;"	m
k	./pytest.vim	/^    nnoremap <script> <buffer> k       :call <sid>GoToInlineError(-1)<CR>$/;"	m
pytest_loop_autocmd	./pytest.vim	/^    augroup pytest_loop_autocmd$/;"	a
q	./pytest.vim	/^    nnoremap <silent> <buffer> q       :call <sid>ClearAll(1)<CR>$/;"	m
s:ClearAll	./pytest.vim	/^function! s:ClearAll(...)$/;"	f
s:CloseIfLastWindow	./pytest.vim	/^function! s:CloseIfLastWindow()$/;"	f
s:Completion	./pytest.vim	/^function! s:Completion(ArgLead, CmdLine, CursorPos)$/;"	f
s:CurrentPath	./pytest.vim	/^function! s:CurrentPath()$/;"	f
s:Delgado	./pytest.vim	/^function! s:Delgado(path, arguments, message)$/;"	f
s:Echo	./pytest.vim	/^function! s:Echo(msg, ...)$/;"	f
s:FindPythonObject	./pytest.vim	/^function! s:FindPythonObject(obj)$/;"	f
s:GoToError	./pytest.vim	/^function! s:GoToError(direction)$/;"	f
s:GoToInlineError	./pytest.vim	/^function! s:GoToInlineError(direction)$/;"	f
s:GreenBar	./pytest.vim	/^function! s:GreenBar()$/;"	f
s:HandleOutput	./pytest.vim	/^function! s:HandleOutput(stdout)$/;"	f
s:HandleOutputNeoVim	./pytest.vim	/^function! s:HandleOutputNeoVim(...) dict$/;"	f
s:IsParametrized	./pytest.vim	/^function! s:IsParametrized(line)$/;"	f
s:LastSession	./pytest.vim	/^function! s:LastSession()$/;"	f
s:LoopOnFail	./pytest.vim	/^function! s:LoopOnFail(type)$/;"	f
s:LoopProxy	./pytest.vim	/^function! s:LoopProxy(type)$/;"	f
s:NameOfCurrentClass	./pytest.vim	/^function! s:NameOfCurrentClass()$/;"	f
s:NameOfCurrentFunction	./pytest.vim	/^function! s:NameOfCurrentFunction()$/;"	f
s:NameOfCurrentMethod	./pytest.vim	/^function! s:NameOfCurrentMethod()$/;"	f
s:OpenError	./pytest.vim	/^function! s:OpenError(path)$/;"	f
s:ParseError	./pytest.vim	/^function! s:ParseError(stdout)$/;"	f
s:ParseErrors	./pytest.vim	/^function! s:ParseErrors(stdout)$/;"	f
s:ParseFailures	./pytest.vim	/^function! s:ParseFailures(stdout)$/;"	f
s:ParseSuccess	./pytest.vim	/^function! s:ParseSuccess(stdout) abort$/;"	f
s:Pdb	./pytest.vim	/^function! s:Pdb(path, ...)$/;"	f
s:ProjectPath	./pytest.vim	/^function! s:ProjectPath()$/;"	f
s:Proxy	./pytest.vim	/^function! s:Proxy(action, ...)$/;"	f
s:PytestFailsSyntax	./pytest.vim	/^function! s:PytestFailsSyntax() abort$/;"	f
s:PytestSyntax	./pytest.vim	/^function! s:PytestSyntax() abort$/;"	f
s:RedBar	./pytest.vim	/^function! s:RedBar()$/;"	f
s:ResetAll	./pytest.vim	/^function! s:ResetAll()$/;"	f
s:RunInSplitWindow	./pytest.vim	/^function! s:RunInSplitWindow(path)$/;"	f
s:RunPyTest	./pytest.vim	/^function! s:RunPyTest(path, ...) abort$/;"	f
s:SetExecutable	./pytest.vim	/^function! s:SetExecutable()$/;"	f
s:ShowError	./pytest.vim	/^function! s:ShowError()$/;"	f
s:ShowFails	./pytest.vim	/^function! s:ShowFails(...)$/;"	f
s:ThisClass	./pytest.vim	/^function! s:ThisClass(verbose, ...)$/;"	f
s:ThisFile	./pytest.vim	/^function! s:ThisFile(verbose, ...)$/;"	f
s:ThisFunction	./pytest.vim	/^function! s:ThisFunction(verbose, ...)$/;"	f
s:ThisMethod	./pytest.vim	/^function! s:ThisMethod(verbose, ...)$/;"	f
s:ThisProject	./pytest.vim	/^function! s:ThisProject(verbose, ...)$/;"	f
s:ToggleFailWindow	./pytest.vim	/^function! s:ToggleFailWindow()$/;"	f
s:ToggleLastSession	./pytest.vim	/^function! s:ToggleLastSession()$/;"	f
s:ToggleShowError	./pytest.vim	/^function! s:ToggleShowError()$/;"	f
s:Version	./pytest.vim	/^function! s:Version()$/;"	f
s:WarningMessage	./pytest.vim	/^function! s:WarningMessage(message)$/;"	f
s:id	./pytest.vim	/^let s:id                       = 0$/;"	v
